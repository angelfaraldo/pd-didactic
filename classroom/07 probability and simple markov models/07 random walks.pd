#N canvas 285 23 1777 713 12;
#X floatatom 140 248 5 0 0 0 - - -;
#X obj 167 125 f;
#X obj 140 198 random 4;
#X obj 74 197 random 2;
#X floatatom 74 245 5 0 0 0 - - -;
#X obj 167 150 t b b f;
#X obj 195 351 +;
#X obj 167 99 metro 100;
#X obj 167 77 tgl 15 0 empty empty empty 0 -6 0 8 -262144 -1 -1 0 1
;
#X obj 140 276 + 1;
#X floatatom 278 155 5 0 0 0 - - -;
#X obj 122 332 *;
#X msg 64 305 -1;
#X obj 278 85 moses 0;
#X obj 324 115 moses 100;
#X obj 278 109 * -1;
#X obj 415 98 * -1;
#X obj 415 123 + 200;
#X msg 97 305 1;
#X text 58 28 Random walk generator;
#X text 187 76 on/off;
#X text 278 175 output;
#X text 59 398 A random walk is a special case of a Markov chain \,
in which the states are integers and the transitions add or subtract
a small amount from the previous state to get a new one. Here the "f"
holds the state. When it gets a bang \, the previous state is added
to a random number (from 1 to 4) multiplied by a random sign (-1 or
1). The new value is then coerced into the range from 0 to 100;
#X text 80 223 sign;
#X text 145 221 magnitude;
#X text 228 340 add prev value;
#X text 227 355 to random increment;
#X text 282 28 coercion to range 0-100 \; if out of range \, reflect
;
#X text 281 58 us back in.;
#X text 270 542 updated for Pd version 0.37-1;
#X obj 74 276 sel 0 1;
#X obj 663 166 tgl 15 0 empty empty empty 17 7 0 10 -262144 -1 -1 0
1;
#X floatatom 807 235 5 0 0 0 - - -;
#X obj 663 211 list-abs/list-wrandom;
#N canvas 0 22 450 278 (subpatch) 0;
#X array markov1 6 float 3;
#A 0 0.1 0.4 0.5 0 0 0.1;
#X coords 0 1 6 0 266 178 1 0 0;
#X restore 986 156 graph;
#X msg 807 262 \; markov1 resize \$1;
#X obj 859 208 list prepend 0;
#X obj 859 232 s markov1;
#X text 703 298 lowest note;
#X msg 663 499 \$1 100;
#N canvas 0 22 450 278 (subpatch) 0;
#X array scale 7 float 3;
#A 0 0.857147 1.28573 1.97146 2.91434 3.68578 4.2858 5.14296;
#X coords 0 12 7 0 200 140 1 0 0;
#X restore 1272 157 graph;
#X obj 663 266 tabread scale;
#X msg 1274 311 \; scale resize 7 \; scale 0 0 2 4 6 8 10 12;
#X floatatom 674 236 5 0 0 0 - - -;
#X text 965 58 these are the weights for each scale degree \, you don't
need to scale them \, since the object will do automatically. They
are visualised in the markov1 table.;
#X msg 774 61 0 0.2 0.5 0.7 1 0.1 0.3;
#X msg 809 89 0.1 0.4 0.5 0 0 0.1;
#X obj 796 559 bendout, f 16;
#X obj 796 422 * 4096;
#X obj 796 397 wrap;
#X obj 852 422 bendin, f 8;
#X obj 852 447 - 8192;
#X obj 796 512 + 0;
#X obj 852 472 t b f;
#X obj 796 535 change;
#X obj 663 556 noteout 1;
#X obj 663 185 metro 400;
#X obj 663 525 makenote 100 350;
#X obj 663 296 + 48;
#X text 921 416 Be aware that this method of non-tempered tuning will
work in monodic (sequential) signals... For polyphony or chords \,
we would need a slightly more complicated strategy (i.e. creating separate
voices in separate midi channels;
#X text 1068 570 FIX THIS!!!!;
#X connect 0 0 9 0;
#X connect 1 0 5 0;
#X connect 2 0 0 0;
#X connect 3 0 4 0;
#X connect 4 0 30 0;
#X connect 5 0 3 0;
#X connect 5 1 2 0;
#X connect 5 2 6 1;
#X connect 6 0 13 0;
#X connect 7 0 1 0;
#X connect 8 0 7 0;
#X connect 9 0 11 1;
#X connect 10 0 1 1;
#X connect 11 0 6 0;
#X connect 12 0 11 0;
#X connect 13 0 15 0;
#X connect 13 1 14 0;
#X connect 14 0 10 0;
#X connect 14 1 16 0;
#X connect 15 0 10 0;
#X connect 16 0 17 0;
#X connect 17 0 10 0;
#X connect 18 0 11 0;
#X connect 30 0 12 0;
#X connect 30 1 18 0;
#X connect 31 0 56 0;
#X connect 32 0 35 0;
#X connect 33 0 43 0;
#X connect 33 0 41 0;
#X connect 33 1 32 0;
#X connect 36 0 37 0;
#X connect 39 0 57 0;
#X connect 41 0 58 0;
#X connect 45 0 33 1;
#X connect 45 0 36 0;
#X connect 46 0 33 1;
#X connect 46 0 36 0;
#X connect 48 0 52 0;
#X connect 49 0 48 0;
#X connect 50 0 51 0;
#X connect 50 1 47 1;
#X connect 51 0 53 0;
#X connect 52 0 54 0;
#X connect 53 0 52 0;
#X connect 53 1 52 1;
#X connect 54 0 47 0;
#X connect 56 0 33 0;
#X connect 57 0 55 0;
#X connect 57 1 55 1;
#X connect 58 0 39 0;
#X connect 58 0 49 0;
