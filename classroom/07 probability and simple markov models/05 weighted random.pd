#N canvas 383 49 1545 616 12;
#X msg 146 108 bang;
#X text 256 502 updated for Pd version 0.35;
#X text 45 32 You can generate weighted random numbers from uniformly
distributed ones. If you just want two possible outcomes with a varying
probability for each one \, you can do as shown:;
#X obj 146 137 random 100;
#X obj 145 223 bng 20 250 50 0 empty empty empty 0 -6 0 8 -262144 -1
-1;
#X obj 199 223 bng 20 250 50 0 empty empty empty 0 -6 0 8 -262144 -1
-1;
#X floatatom 199 166 3 0 100 0 - - -;
#X obj 146 195 moses 80;
#X text 53 262 This outputs a number at left 80% of the time \, otherwise
at right \, unless you override the "80" using the number box. You
may extend this to more than two possible outcomes \, for instance
like this:, f 56;
#X msg 103 351 bang;
#X obj 103 377 random 100;
#X obj 102 434 bng 20 250 50 0 empty empty empty 0 -6 0 8 -262144 -1
-1;
#X obj 193 434 bng 20 250 50 0 empty empty empty 0 -6 0 8 -262144 -1
-1;
#X obj 103 405 moses 10;
#X obj 193 405 moses 30;
#X obj 246 434 bng 20 250 50 0 empty empty empty 0 -6 0 8 -262144 -1
-1;
#X text 100 459 10%;
#X text 191 459 20%;
#X text 248 459 70%;
#X text 231 166 <= change probability;
#X text 187 106 <= click to test;
#X text 143 349 <= click to test;
#X obj 667 133 tgl 15 0 empty empty empty 17 7 0 10 -262144 -1 -1 0
1;
#X floatatom 811 202 5 0 0 0 - - -;
#X obj 667 178 list-abs/list-wrandom;
#N canvas 0 22 450 278 (subpatch) 0;
#X array markov1 7 float 3;
#A 0 0 0.2 0.5 0.7 1 0.1 0.3;
#X coords 0 1 7 0 266 178 1 0 0;
#X restore 990 123 graph;
#X msg 811 229 \; markov1 resize \$1;
#X obj 863 175 list prepend 0;
#X obj 863 199 s markov1;
#X text 707 265 lowest note;
#X msg 667 466 \$1 100;
#N canvas 0 22 450 278 (subpatch) 0;
#X array scale 7 float 3;
#A 0 0.857147 1.28573 1.97146 2.91434 3.68578 4.2858 5.14296;
#X coords 0 12 7 0 200 140 1 0 0;
#X restore 1276 124 graph;
#X obj 667 233 tabread scale;
#X msg 1278 278 \; scale resize 7 \; scale 0 0 2 4 6 8 10 12;
#X floatatom 678 203 5 0 0 0 - - -;
#X text 969 25 these are the weights for each scale degree \, you don't
need to scale them \, since the object will do automatically. They
are visualised in the markov1 table.;
#X msg 778 28 0 0.2 0.5 0.7 1 0.1 0.3;
#X msg 813 56 0.1 0.4 0.5 0 0 0.1;
#X obj 800 526 bendout, f 16;
#X obj 800 389 * 4096;
#X obj 800 364 wrap;
#X obj 856 389 bendin, f 8;
#X obj 856 414 - 8192;
#X obj 800 479 + 0;
#X obj 856 439 t b f;
#X obj 800 502 change;
#X obj 667 523 noteout 1;
#X obj 667 152 metro 400;
#X obj 667 492 makenote 100 350;
#X obj 667 263 + 48;
#X text 925 383 Be aware that this method of non-tempered tuning will
work in monodic (sequential) signals... For polyphony or chords \,
we would need a slightly more complicated strategy (i.e. creating separate
voices in separate midi channels;
#X connect 0 0 3 0;
#X connect 3 0 7 0;
#X connect 6 0 7 1;
#X connect 7 0 4 0;
#X connect 7 1 5 0;
#X connect 9 0 10 0;
#X connect 10 0 13 0;
#X connect 13 0 11 0;
#X connect 13 1 14 0;
#X connect 14 0 12 0;
#X connect 14 1 15 0;
#X connect 22 0 47 0;
#X connect 23 0 26 0;
#X connect 24 0 34 0;
#X connect 24 0 32 0;
#X connect 24 1 23 0;
#X connect 27 0 28 0;
#X connect 30 0 48 0;
#X connect 32 0 49 0;
#X connect 36 0 24 1;
#X connect 36 0 27 0;
#X connect 37 0 24 1;
#X connect 37 0 27 0;
#X connect 39 0 43 0;
#X connect 40 0 39 0;
#X connect 41 0 42 0;
#X connect 41 1 38 1;
#X connect 42 0 44 0;
#X connect 43 0 45 0;
#X connect 44 0 43 0;
#X connect 44 1 43 1;
#X connect 45 0 38 0;
#X connect 47 0 24 0;
#X connect 48 0 46 0;
#X connect 48 1 46 1;
#X connect 49 0 30 0;
#X connect 49 0 40 0;
